# -*- coding: utf-8 -*-
"""KNN-Zaky.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dVF-izjY319pAR9YHz3oy0e6Oge8uBto

# Import Library
"""

import pandas as pd
import numpy as np

from sklearn.preprocessing import MinMaxScaler

"""# Download Dataset"""

!pip install PyDrive

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

downloaded = drive.CreateFile({'id':"1h1F46PJ5qND0uUHF-5FYHAlKErgWoM2E"})   
downloaded.GetContentFile('Diabetes.csv')

df= pd.read_csv('Diabetes.csv')
df

"""# PreProcessing


"""

# replace nilai 0
zero = ['Glucose', 'BloodPressure', 'SkinThickness', 'BMI', 'Insulin']
for column in zero:
  df[column] = df[column].replace(0, np.NaN)
  mean = int(df[column].mean(skipna=True))
  df[column] = df[column].replace(np.NaN, mean)
  
# Scalling  
scaler = MinMaxScaler()
scalling_column = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']
df[scalling_column] = scaler.fit_transform(df[scalling_column])

# fold 1
df1 = [df.iloc[:614].reset_index(drop=True), df.iloc[614:].reset_index(drop=True)]

# fold 2
df2 = [pd.concat([df.iloc[:461], df.iloc[614:768]]).reset_index(drop=True), 
       df.iloc[461:614].reset_index(drop=True)]

# fold 3
df3 = [pd.concat([df.iloc[:307], df.iloc[461:768]]).reset_index(drop=True),
       df.iloc[307:461].reset_index(drop=True)]

# fold 4
df4 = [pd.concat([df.iloc[:154], df.iloc[307:768]]).reset_index(drop=True),
       df.iloc[154:307].reset_index(drop=True)]

#fold 5
df5 = [df.iloc[154:768].reset_index(drop=True), df.iloc[:154].reset_index(drop=True)]

print(df1[0].shape)
print(df2[0].shape)
print(df3[0].shape)
print(df4[0].shape)
print(df5[0].shape)
print("\n")
print(df1[1].shape)
print(df2[1].shape)
print(df3[1].shape)
print(df4[1].shape)
print(df5[1].shape)

"""# Metode Perhitungan Jarak"""

# EUCLIDIAN DISTANCE
def distance(x1, x2):                                   
  return np.sqrt(np.sum(x1-x2)**2)

# MANHATTAN DISTANCE
def distance1(x1, x2):
    return np.sum(np.abs(np.array(x1) - np.array(x2)))

"""# Perhitungan Akurasi"""

def score_accuracy(test, pred):
    testSet = test['Outcome'].values.tolist()
    correct = 0
    for x in range(len(pred)):
        if testSet[x] == pred[x]:
            correct += 1
    return (correct/float(len(testSet))) * 100.0

"""# KNN

"""

def knn(k, train, test): 

  X = train.drop("Outcome", axis=1).values
  y = train.Outcome.values

  res =  []

  for data_test in test:
      
      jarak = []
      for data_train in X: 
          jarak.append(distance1(data_train, data_test)) # hitung jarak setiap data

      # mendapatkan nilai indeks minimum
      min_indeks = np.argsort(jarak)[:k]
      
  
      # predictions
      pred = [0, 0]
      for outcome in y[min_indeks]:
          if outcome == 0:
              pred[0] += 1
          else:
              pred[1] += 1

      
      if pred[0] > pred[1] :
          res.append(0)
      else:
          res.append(1)
    
  return res

"""# Main Program"""

def Main():
    k = 1
    acc = 0
    K = []

    for i in range(20):
        acc = 0
        for data in [df1, df2, df3, df4, df5]:
            y_pred = knn(k, data[0], data[1].drop("Outcome", axis=1).values)
            acc += score_accuracy(data[1], y_pred)
            
        print("Akurasi dengan k = ",k, "adalah = ", (acc/5))
        K.append([k, acc/5])
        k += 1
    lSorted = sorted(K, key=lambda x: x[1], reverse=True)
    
    print("\nNilai K terbaik : ", lSorted[0][0], " Dengan Accuracy : ", lSorted[0][1])
    

Main()